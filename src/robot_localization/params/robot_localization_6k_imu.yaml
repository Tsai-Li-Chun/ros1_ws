frequency: 50
#sensor_timeout : 0.02
#transform_time_offset: .1
# If you're having trouble, try setting this to true, and then echo the /diagnostics_agg topic to see if the node is
# unhappy with any settings or data.
print_diagnostics: false
# Debug settings. Not for the faint of heart. Outputs a ludicrous amount of information to the file specified by
# debug_out_file. I hope you like matrices! Please note that setting this to true will have strongly deleterious
# effects on the performance of the node. Defaults to false if unspecified.
debug: false
predict_to_current_time: true # true

dynamic_process_noise_covariance: true # true

two_d_mode: true
diagnostics_agg: false
publish_tf : true #false
#x     , y     , z,
#roll  , pitch , yaw,  #angle
#vx    , vy    , vz,
#vroll , vpitch, vyaw,
#ax    , ay    , az

#vy -> true ,before cartographer
odom0: /raw_odom
odom0_differential: true #true
odom0_relative: false
odom0_nodelay: false

#odom0_pose_rejection_threshold: 5
#odom0_twist_rejection_threshold: 0.75

odom0_queue_size: 25 #60 #25 #20
#odom0_differential: true
#odom0_relative: false
odom0_config: [false, false, false,
               false, false, false,
               true,  true,  false,
               false, false, false,
               false, false, false]

#odom1: /laser_odometry_node/laser_odom
#odom1_differential: false #true
#odom1_relative: false
#odom1_nodelay: false

#odom1_queue_size: 2
#odom1_config: [false, false, false,
#               false, false, false,
#               true,  false,  false,
#               false, false, false,
#               false, false, false]

imu0: /imu_data
#imu0: /camera/imu
#imu0: /tx2_imu
#imu0: /imu/data/filter

imu0_differential: true #true fine everything
imu0_relative: false #true
#imu0_nodelay: false
imu0_nodelay: false
#imu0_pose_rejection_threshold: 0.8                 # Note the difference in parameter names
#imu0_twist_rejection_threshold: 0.8    
imu0_queue_size: 25 #50
imu0_remove_gravitational_acceleration: true
#imu0_differential: false
#imu0_relative: true

# NOTE: If you find that your robot has x drift,
# the most likely candidate is the x'' (acceleration) fr$
# Just set it to false! (It's the first entry on the las$
imu0_config: [false, false, false,
              false, false, true,
              false, false, false,
              false, false, false,
              true, false, false]

# Whether or not we use the control input during predicition. Defaults to false.
use_control: false
# Which velocities are being controlled. Order is vx, vy, vz, vroll, vpitch, vyaw.
#control_config: [true, true, false, false, false, true]

#acceleration_limits: [1.3 ,1.3,0.0,0.0,0.0,3.4]
#deceleration_limits: [1.3 ,1.3,0.0,0.0,0.0,3.4]

map_frame: map
odom_frame: odom
base_link_frame: base_footprint
world_frame: odom
# for cartographer : map -> odom
# yaw 2.5 vx 5
# vyaw 2e1 2.13e2 7e1
# vy 0.025
# [ADVANCED] The process noise covariance matrix can be difficult to tune, and can vary for each application, so it is
# exposed as a configuration parameter. This matrix represents the noise we add to the total error after each
# prediction step. The better the omnidirectional motion model matches your system, the smaller these values can be.
# However, if users find that a given variable is slow to converge, one approach is to increase the
# process_noise_covariance diagonal value for the variable in question, which will cause the filter's predicted error
# to be larger, which will cause the filter to trust the incoming measurement more during correction. The values are
# ordered as x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. Defaults to the matrix below if
# unspecified.             x,    y,    z,   roll, pitch, yaw,  vx,    vy,    vz, vroll,vpitch,vyaw, ax,   ay,   az.
process_noise_covariance: [0.02, 0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                           0,    0.01, 0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                           0,    0,    0.01, 0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                           0,    0,    0,    0.03, 0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                           0,    0,    0,    0,    0.03, 0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                           0,    0,    0,    0,    0,    0.9,  0,     0,     0,    0,    0,    0,    0,    0,    0,
                           0,    0,    0,    0,    0,    0,    0.08,   0,     0,    0,    0,    0,    0,    0,    0,
                           0,    0,    0,    0,    0,    0,    0,     0.1,   0,    0,    0,    0,    0,    0,    0,
                           0,    0,    0,    0,    0,    0,    0,     0,     0.01, 0,    0,    0,    0,    0,    0,
                           0,    0,    0,    0,    0,    0,    0,     0,     0,    0.01, 0,    0,    0,    0,    0,
                           0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0.01, 0,    0,    0,    0,
                           0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0.03, 0,    0,    0,
                           0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0.01, 0,    0,
                           0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0.01, 0,
                           0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0.01]

# [ADVANCED] This represents the initial value for the state estimate error covariance matrix. Setting a diagonal
# value (variance) to a large value will result in rapid convergence for initial measurements of the variable in
# question. Users should take care not to use large values for variables that will not be measured directly. The values
# are ordered as x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. Defaults to the matrix below
#if unspecified.              x,    y,    z,   roll,pitch, yaw,  vx,   vy,    vz, vroll, vpitch, vyaw,  ax,   ay,   az
initial_estimate_covariance: [1e-9, 0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
                              0,    1e-9, 0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
                              0,    0,    1e-9, 0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
                              0,    0,    0,    1e-9, 0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
                              0,    0,    0,    0,    1e-9, 0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
                              0,    0,    0,    0,    0,    1e-5, 0,    0,    0,    0,     0,     0,     0,    0,    0,
                              0,    0,    0,    0,    0,    0,    1e-9,  0,    0,    0,     0,     0,     0,    0,    0,
                              0,    0,    0,    0,    0,    0,    0,    1e-9, 0,    0,     0,     0,     0,    0,    0,
                              0,    0,    0,    0,    0,    0,    0,    0,    1e-9, 0,     0,     0,     0,    0,    0,
                              0,    0,    0,    0,    0,    0,    0,    0,    0,    1e-9,  0,     0,     0,    0,    0,
                              0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     1e-9,  0,     0,    0,    0,
                              0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     1e-9,  0,    0,    0,
                              0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     1e-9, 0,    0,
                              0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    1e-9, 0,
                              0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    1e-9]

